<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gyorouのぼっち日記</title>
  <subtitle>Shitty ideas and thoughts</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.bocchi.tokyo/"/>
  <updated>2016-07-10T10:59:58.000Z</updated>
  <id>http://blog.bocchi.tokyo/</id>
  
  <author>
    <name>Gyorou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker-compose 搭建快速开发环境</title>
    <link href="http://blog.bocchi.tokyo/2016/07/10/20160710/"/>
    <id>http://blog.bocchi.tokyo/2016/07/10/20160710/</id>
    <published>2016-07-10T10:42:35.000Z</published>
    <updated>2016-07-10T10:59:58.000Z</updated>
    
    <content type="html">&lt;p&gt;一个web application 通常会依赖一系列的外部工具，比如 Postgresql 啊，Redis，ElasticSearch 这些。&lt;br&gt;当我们要在 loal 迅速搭建开发环境的时候可能不太愿意一个一个去安装这些依赖。比较好的方法是利用 Docker 搭建一个方便可插拔的开发环境。&lt;/p&gt;
&lt;p&gt;就拿Ruby-china来做一下练习吧。反正这个Dproject 也缺一个 Docker 的开发环境。&lt;/p&gt;
&lt;p&gt;首先在项目的根目录创建一个&lt;code&gt;docker-compose.yml&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;postgresql:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  image:&lt;/span&gt; postgres:&lt;span class=&quot;number&quot;&gt;9.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;redis:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  image:&lt;/span&gt; redis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;memcached:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  image:&lt;/span&gt; memcached&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;elasticsearch:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  image:&lt;/span&gt; elasticsearch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个项目需要安装Postgresql, Redis, Memcached以及ElasticSearch这几个外部工具。我们都用官方的docker Image把它们先罗列好。&lt;br&gt;官方的Image有个一般已经expose了默认的端口，比如 Redis 的 6379 elasticSearch的 9200和9300。&lt;/p&gt;
&lt;p&gt;如果我们需要明示的expose一些端口，可以使用expose。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;redis:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  image:&lt;/span&gt; redis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  expose:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;6379&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果是一样的。&lt;br&gt;注意这里的expose是用来expose给用doker-compse 关联起来的container。而并非host。这个之后解释。&lt;/p&gt;
&lt;p&gt;接下来我们要给我们的application找个容器。&lt;br&gt;同样在Ruby-china的根目录下新建一个Dockerfile。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ruby:&lt;span class=&quot;number&quot;&gt;2.3&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev nodejs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN mkdir /myapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WORKDIR /myapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ADD . /myapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN gem install bundler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN bundle install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXPOSE &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXPOSE &lt;span class=&quot;number&quot;&gt;28080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们选用官方的ruby2.3 Image作为基础。 首先是安装一些需要的包，接着则是把当前目录挂载到conatiner内部的&lt;code&gt;/myapp&lt;/code&gt;这个目录中。&lt;br&gt;接着更新bundler，然后&lt;code&gt;bundle install&lt;/code&gt;最后expose端口。这里的3000作为web application的默认端口，而28080则是留给actioncable的。&lt;/p&gt;
&lt;p&gt;接下来我们把我们手工制作的这个 Image 放到&lt;code&gt;docker-compose.yml&lt;/code&gt;中。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;web:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  build:&lt;/span&gt; .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  command:&lt;/span&gt; bundle exec rails s -p &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt; -b &lt;span class=&quot;string&quot;&gt;&#39;0.0.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; .:/myapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  links:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; postgresql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; redis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; elasticsearch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; memcached&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    MEMCACHED_URL:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;memcached&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ELASTICSEARCH_URL:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;elasticsearch&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;volumes&lt;/code&gt; 用来关联host和container内部的目录。 指定links会在当前的 conainer 内部生成相关的hosts。&lt;br&gt;我们可以调查一下。&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gyorou@gyorou-VirtualBox:~/workspace/ruby-china$ docker-compose run web cat /etc/hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;       localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;::&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;     localhost ip6-localhost ip6-loopback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;fe00:&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ip6-localnet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ff00:&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ip6-mcastprefix&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ff02:&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ip6-allnodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ff02:&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ip6-allrouters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.4&lt;/span&gt;      elasticsearch 4c8d3d7ce797 rubychina_elasticsearch_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.2&lt;/span&gt;      memcached_1 d972862d8a5a rubychina_memcached_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.2&lt;/span&gt;      rubychina_memcached_1 d972862d8a5a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.5&lt;/span&gt;      postgresql_1 fb2524374e4b rubychina_postgresql_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.3&lt;/span&gt;      redis 53ae388086e1 rubychina_redis_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.3&lt;/span&gt;      redis_1 53ae388086e1 rubychina_redis_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.3&lt;/span&gt;      rubychina_redis_1 53ae388086e1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.4&lt;/span&gt;      elasticsearch_1 4c8d3d7ce797 rubychina_elasticsearch_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.4&lt;/span&gt;      rubychina_elasticsearch_1 4c8d3d7ce797&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.2&lt;/span&gt;      memcached d972862d8a5a rubychina_memcached_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.5&lt;/span&gt;      postgresql fb2524374e4b rubychina_postgresql_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.5&lt;/span&gt;      rubychina_postgresql_1 fb2524374e4b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.6&lt;/span&gt;      a8a2aa52a5e1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来我们需要修改一些setup的脚本，把一些需要配置host的地方修改成　docker-compose 给我们提供的内容。&lt;br&gt;比如修改 &lt;code&gt;config/database.yml&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;default&lt;/span&gt;: &amp;amp;default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;adapter&lt;/span&gt;: postgresql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;pool&lt;/span&gt;: 64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;timeout&lt;/span&gt;: 5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;encoding&lt;/span&gt;: utf-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;host&lt;/span&gt;: postgresql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;yaml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# PRODUCTION&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;production:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;lt;: &lt;span class=&quot;meta&quot;&gt;*default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  database:&lt;/span&gt; ruby-china&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Development specific&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;development:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;lt;: &lt;span class=&quot;meta&quot;&gt;*default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  database:&lt;/span&gt; ruby-china-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Warning: The database defined as &quot;test&quot; will be erased and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# re-generated from your development database when you run &quot;rake&quot;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Do not set this db to the same as development or production.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;test:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;lt;: &lt;span class=&quot;meta&quot;&gt;*default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  database:&lt;/span&gt; ruby-china-test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，这里我们把host指向了&lt;code&gt;postgresql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后setup起来之后开始跑呗。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker-compose run web bin/setup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker-compose run -&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;3000:3000&quot;&lt;/span&gt; -&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;28080:28080&quot;&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要注意的地方无非就是别忘了吧web conatiner的端口关联到host上就是了。&lt;/p&gt;
&lt;p&gt;最近看国内的技术新闻，各种容器云，各种什么高级架构师，无非就是鼓捣这么几下子罢了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一个web application 通常会依赖一系列的外部工具，比如 Postgresql 啊，Redis，ElasticSearch 这些。&lt;br&gt;当我们要在 loal 迅速搭建开发环境的时候可能不太愿意一个一个去安装这些依赖。比较好的方法是利用 Docker 搭建一个方
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Docker" scheme="http://blog.bocchi.tokyo/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Redux/React 与 ActionCable 友好合作的一些备忘</title>
    <link href="http://blog.bocchi.tokyo/2016/07/03/20160703/"/>
    <id>http://blog.bocchi.tokyo/2016/07/03/20160703/</id>
    <published>2016-07-03T13:06:28.000Z</published>
    <updated>2016-07-03T13:07:25.000Z</updated>
    
    <content type="html">&lt;p&gt;使用ActionCable和Redux可以在Rails中内置消息提示啊，即时聊天之类的功能。所以有必要了解一些实现方法。&lt;br&gt;setup基本抄袭&lt;a href=&quot;http://qiita.com/suzan2go/items/24ef3320e04b8a84597f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;railsでreact(react-rails)とreduxを動かす&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用的基本思路是创建ActionCable的Channel，在channel的event中调用Redux的action改变Store的state。&lt;br&gt;将store的state绑定到React的Component的state，完成rerender。&lt;/p&gt;
&lt;p&gt;我们用一个实现在线用户即时聊天例子说明。&lt;br&gt;首先用Rails新建一个ActionCable的Channel。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# app/channels/chat_channel.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChatChannel&lt;/span&gt; &amp;lt; ApplicationCable::Channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stop_all_streams&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stream_from &lt;span class=&quot;string&quot;&gt;&quot;chat_all&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# chat on the channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user = User.find(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user_image = user.avatar? ? user.avatar.url : user.letter_avatar_url(&lt;span class=&quot;number&quot;&gt;48&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      timestamp = Time.now.strftime(&lt;span class=&quot;string&quot;&gt;&#39;%H:%M:%S&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ActionCable.server.broadcast(&lt;span class=&quot;string&quot;&gt;&quot;chat_all&quot;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;user_name:&lt;/span&gt; user.name, &lt;span class=&quot;symbol&quot;&gt;user_image:&lt;/span&gt; user_image, &lt;span class=&quot;symbol&quot;&gt;message:&lt;/span&gt; data[&lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;], &lt;span class=&quot;symbol&quot;&gt;time:&lt;/span&gt; timestamp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsubscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stop_all_streams&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每当有用户发言，我们群播(broadcast)该用户的用户名，头像，以及发言。&lt;br&gt;这里的&lt;code&gt;self.current_user_id&lt;/code&gt;来自user Cookie中的&lt;code&gt;user_id&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# app/channels/application_cable/connection.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicationCable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Connection&lt;/span&gt; &amp;lt; ActionCable::Connection::&lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    identified_by &lt;span class=&quot;symbol&quot;&gt;:current_user_id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;connect&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id = find_verified_user_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_verified_user_id&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cookies.signed[&lt;span class=&quot;symbol&quot;&gt;:user_id&lt;/span&gt;] &lt;span class=&quot;params&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单起见，我们把需要的前段代码都写到一块。&lt;br&gt;首先是reducer 和 store。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123; Component &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createStore &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; messageReducer = (state = [], action) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(action.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;NEW_MESSAGE&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...state,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;: action.payload.from,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          image: action.payload.image,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          text: action.payload.text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          time: action.payload.time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; messageer = createStore(messageReducer);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来建立一个ActionCable的client对&lt;code&gt;ChatChannel&lt;/code&gt;进行监听。 当收到消息的时候，我们调用 store 的dispatch 方法更新state。&lt;br&gt;当用户发言，我们调用server的speak方法。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;App.room = App.cable.subscriptions.create(&lt;span class=&quot;string&quot;&gt;&quot;ChatChannel&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        connected: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        disconnected: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        received: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          messageer.dispatch(&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&quot;NEW_MESSAGE&quot;&lt;/span&gt;, payload: &amp;#123;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;: data[&lt;span class=&quot;string&quot;&gt;&quot;user_name&quot;&lt;/span&gt;], image: data[&lt;span class=&quot;string&quot;&gt;&quot;user_image&quot;&lt;/span&gt;], text: data[&lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;], time: data[&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;]&amp;#125;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        speak: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.perform(&lt;span class=&quot;string&quot;&gt;&#39;speak&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            message: message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后把store和React的Component绑定在一起即可。最简单的方法就是在componentDidMount中调用store的subscribe方法更新component的state。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentDidMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   messageer.subscribe(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;messages: messageer.getState()&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;暂时想到这么多。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用ActionCable和Redux可以在Rails中内置消息提示啊，即时聊天之类的功能。所以有必要了解一些实现方法。&lt;br&gt;setup基本抄袭&lt;a href=&quot;http://qiita.com/suzan2go/items/24ef3320e04b8a84597f&quot; t
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Redux" scheme="http://blog.bocchi.tokyo/tags/Redux/"/>
    
      <category term="React" scheme="http://blog.bocchi.tokyo/tags/React/"/>
    
      <category term="ActionCable" scheme="http://blog.bocchi.tokyo/tags/ActionCable/"/>
    
  </entry>
  
  <entry>
    <title>在 Rails 5 中使用 ActionCable 和 Redis-objects 实现实时显示当前在线用户</title>
    <link href="http://blog.bocchi.tokyo/2016/06/26/20160626-md/"/>
    <id>http://blog.bocchi.tokyo/2016/06/26/20160626-md/</id>
    <published>2016-06-26T09:32:22.000Z</published>
    <updated>2016-06-26T09:40:23.000Z</updated>
    
    <content type="html">&lt;p&gt;显示当前在线用户的解决方法，最先想到的可能是去数据库检索最近多少时间内登录的所有用户然后显示出来。&lt;br&gt;如果已经使用Devise的话，大概是如下思路。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@users = User.where([&lt;span class=&quot;string&quot;&gt;&quot;last_request_at &amp;gt; ?&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.minutes&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.ago&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个查询有个问题就是比较重。另外无法做到实时更新(上例三分钟间隔)。&lt;br&gt;另外就是需要客户端不断发起Ajax去请求当前在线用户的数据。性能差写起来也麻烦。&lt;/p&gt;
&lt;p&gt;基于Websocket的ActionCable的出现似乎给这个问题提供了一个比较好的思路。 ActionCable的入门可以去看这个&lt;a href=&quot;https://github.com/rails/actioncable-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example&lt;/a&gt;， 当然你要是读得懂鸟文，也可以去看这个人的&lt;a href=&quot;http://morizyun.github.io/blog/action-cable-introduction-reading/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先我们建立一个channel来发送和接受websocket的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# app/channels/users_channel.r&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UsersChannel&lt;/span&gt; &amp;lt; ApplicationCable::Channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stream_from &lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# get the user information, send to all users&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# ActionCable.server.broadcast(&quot;all&quot;, users: current_online_users)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsubscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# get the user information, send to all users&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# ActionCable.server.broadcast(&quot;all&quot;, users: current_online_users)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么要如何获取所有当前在线用户数据呢？&lt;/p&gt;
&lt;p&gt;我们可以用一个user_id来识别每一个websocket的access。&lt;br&gt;这个user_id和user数据表中的id一致，接下来我们去数据库检索这个user的信息，然后保存到Redis里面即可。&lt;br&gt;当用户连接上我们的网页(subscribed)，我们获取user_id，向Redis中写入用户数据，然后向所有当前活着的websocket连接发送Redis中所有在线用户的数据。&lt;/p&gt;
&lt;h3 id=&quot;从连接中获取user-id&quot;&gt;&lt;a href=&quot;#从连接中获取user-id&quot; class=&quot;headerlink&quot; title=&quot;从连接中获取user_id&quot;&gt;&lt;/a&gt;从连接中获取user_id&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;＃ app/channels/application_cable/channel.rb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicationCable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Connection&lt;/span&gt; &amp;lt; ActionCable::Connection::&lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    identified_by &lt;span class=&quot;symbol&quot;&gt;:current_user_id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;connect&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id = find_verified_user_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_verified_user_id&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cookies.signed[&lt;span class=&quot;symbol&quot;&gt;:user_id&lt;/span&gt;] &lt;span class=&quot;params&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比较简单的方法是把用户id保存在cookie里面，然后当建立websocket连接的时候去取就是了。&lt;/p&gt;
&lt;h3 id=&quot;从用户id获取用户数据并写入Redis&quot;&gt;&lt;a href=&quot;#从用户id获取用户数据并写入Redis&quot; class=&quot;headerlink&quot; title=&quot;从用户id获取用户数据并写入Redis&quot;&gt;&lt;/a&gt;从用户id获取用户数据并写入Redis&lt;/h3&gt;&lt;p&gt;使用&lt;a href=&quot;https://github.com/nateware/redis-objects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis-objects&lt;/a&gt;这个gem可以很方便将Ruby的object映射成Redis中的数据结构。&lt;br&gt;Redis-objects的使用配置直接略过了。就当前提是我们已经做好各种配置。接下来我们选择一个合适的数据结构来存放我们的所有在线用户数据。&lt;br&gt;毋庸置疑，肯定是用Redis的HashKey了。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#app/channels/application_cable/channel.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicationCable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Channel&lt;/span&gt; &amp;lt; ActionCable::Channel::&lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @@users = Redis::HashKey.new(&lt;span class=&quot;string&quot;&gt;&#39;current_user&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里注意我使用了&lt;code&gt;@@users&lt;/code&gt;这个Class Variable。 因为每个用户的连接都会生成一个UserChannel的Instance，所以我们必须保持我们和这个Redis通信的变量不变。&lt;/p&gt;
&lt;p&gt;接下去就是行云流水一般了。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UsersChannel&lt;/span&gt; &amp;lt; ApplicationCable::Channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stream_from &lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user = User.find(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user_image = user.avatar? ? user.avatar.url : user.letter_avatar_url(&lt;span class=&quot;number&quot;&gt;48&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user_info = user.login + &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt; + user_image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @@users[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id] = user_info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ActionCable.server.broadcast(&lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;users:&lt;/span&gt; @@users.all)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsubscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @@users.delete(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.current_user_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ActionCable.server.broadcast(&lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;users:&lt;/span&gt; @@users.all)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意这里我们只对有user_id的用户(登录用户)的数据进行存储分发。然后主要做的事情就是去查询用户个人信息页面的url和用户头像的url，把数据写入Redis，并把所有当前在线用户的数据从Redis发送给前端。&lt;/p&gt;
&lt;p&gt;看到这里你可能有疑惑，因为我们在这里貌似也做了一次比较重的数据库检索。&lt;code&gt;user = User.find(self.current_user_id)&lt;/code&gt;， 这个会不会影响性能呢？&lt;/p&gt;
&lt;p&gt;答案应该是会的。不过我们可以很容易减轻这种检索带来的负面效果。比如对查询结果进行cache之类的。在这里可以参考&lt;a href=&quot;https://github.com/hooopo/second_level_cache&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;second_level_cache&lt;/a&gt;。毕竟活跃用户总是那么一小挫人嘛。&lt;/p&gt;
&lt;p&gt;到此完成了后端存储在线用户数据并实时发送给前端的功能。&lt;br&gt;至于前端该肿么写，我就略过不献丑了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;显示当前在线用户的解决方法，最先想到的可能是去数据库检索最近多少时间内登录的所有用户然后显示出来。&lt;br&gt;如果已经使用Devise的话，大概是如下思路。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="ActionCable" scheme="http://blog.bocchi.tokyo/tags/ActionCable/"/>
    
      <category term="Redis" scheme="http://blog.bocchi.tokyo/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>我们也许并不合适</title>
    <link href="http://blog.bocchi.tokyo/2016/06/15/20160615/"/>
    <id>http://blog.bocchi.tokyo/2016/06/15/20160615/</id>
    <published>2016-06-15T15:40:06.000Z</published>
    <updated>2016-06-15T15:46:32.000Z</updated>
    
    <content type="html">&lt;p&gt;收到人事发来的婉拒信，也不过是今天下午的事情。&lt;br&gt;之前厌恶了当前的项目，摩拳擦掌准备换个部门，甚至已经和对方部门的经理谈笑风声，到头来却似乎什么也没有发生一样。&lt;br&gt;如果要自己检讨一下失败的原因，倒是可以想到太多因素。&lt;br&gt;一一道来的话怕是把自己人格否定了。&lt;br&gt;刚准备自我陶醉在失落的心情之中的时候，脑海里划过当年好友在我穷追烂打某妹子失败时候说的一番话。&lt;/p&gt;
&lt;h3 id=&quot;为什么我不合适&quot;&gt;&lt;a href=&quot;#为什么我不合适&quot; class=&quot;headerlink&quot; title=&quot;为什么我不合适&quot;&gt;&lt;/a&gt;为什么我不合适&lt;/h3&gt;&lt;p&gt;读研究生的时候我喜欢过一个女生。至于为什么会喜欢上，其实也没有仔细去考虑过。&lt;br&gt;有那么一阵子，当得知那个女生在国内其实有男朋友的时候，我甚至毫无犹豫做好了挖墙脚的准备。&lt;br&gt;我这么自信其实是有原因的。首先认识的时候大家的第一印象十分不错。其次当时已经拿到了自己认为不错的公司的内定，相当于未来已经有了保障。而那位女生的男友却还是在苦战国内的二次考研。再加上我和女生有着共同的兴趣爱好，甚至家的位置都是在同一个町内。我的感觉告诉我，这局该是轻松拿下。&lt;br&gt;可是事与愿违，当我千方百计表现得自己非常优秀，非常幽默，总之尽把自己好的一面展示出来的时候，换来的却只是女生的各种无视。&lt;br&gt;忘了大概什么时候开始就死心了。如果可能的话，当时真会想去问一句，我到底哪里错了？为什么不行呢？&lt;br&gt;作为反省，我翻阅了大量的街头巷尾的恋爱心理学书籍，不断地总结和反思自己的过错。不过终究没能得出什么结论。&lt;/p&gt;
&lt;p&gt;直到后来和好友聊起自己的失败谈，总算被他的一番话如雷贯耳，大彻大悟。&lt;/p&gt;
&lt;p&gt;跳槽和追妹其实异曲同工。&lt;br&gt;首先它们都是双向选择，一时冲动我们总是想千方百计去证明自己有多合适，而往往忽略了我们自己真实的想法，反而掩饰了真实的自我。&lt;br&gt;（比如，当被问及有可能要长时间加班，甚至半夜起来紧急对应的时候，我的内心已经很虚，却强作正经。&lt;br&gt;再比如为了强烈迎合想追妹子的兴趣爱好，怀着并不感冒的心情硬是看完了某漫画的20多卷。）&lt;/p&gt;
&lt;p&gt;其次工作的机会和能够邂逅的妹子的机会简直多得不计其数。（如果你表示怀疑，不妨回忆一下，上下班的路上你看到的觉得可爱的女生有多少。所以我们的未来很有可能遇到合适自己的工作或者异性）我们求职跳槽追妹子，目的不过就是找到自己感兴趣的，能够长期坚持下去的目标而已。被决绝之后，我们往往自我陶醉在失落的心情中，甚至这种失落的心情给人带来了安心感。其实也大可不必。&lt;/p&gt;
&lt;p&gt;说了那么多，其实都是我听了好友的一番话之后自己的感悟而已。其实当时好友仅仅说了一句话。&lt;/p&gt;
&lt;p&gt;“我觉得你也并没有错，只是对方傻逼而已”&lt;/p&gt;
&lt;p&gt;虽然要是换位思考，我该是会被对方的努力感动地稀里糊涂吧。&lt;/p&gt;
&lt;p&gt;而作为小标题的答案，其实并不是我不合适，只是“我们”不合适而已。&lt;/p&gt;
&lt;h3 id=&quot;我到底想要什么&quot;&gt;&lt;a href=&quot;#我到底想要什么&quot; class=&quot;headerlink&quot; title=&quot;我到底想要什么&quot;&gt;&lt;/a&gt;我到底想要什么&lt;/h3&gt;&lt;p&gt;我想要深入了解Ruby以及Rails框架，熟悉网络服务开发的各个环节，成为一名优秀的全栈工程师。开发和维护能使世界上大部分人幸福的网络服务。&lt;br&gt;我想找个可爱善解人意的妹子，有着共通的兴趣爱好和话题，能够互相帮助互相进步。&lt;br&gt;最好是， 大胸。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;收到人事发来的婉拒信，也不过是今天下午的事情。&lt;br&gt;之前厌恶了当前的项目，摩拳擦掌准备换个部门，甚至已经和对方部门的经理谈笑风声，到头来却似乎什么也没有发生一样。&lt;br&gt;如果要自己检讨一下失败的原因，倒是可以想到太多因素。&lt;br&gt;一一道来的话怕是把自己人格否定了。&lt;br&gt;
    
    </summary>
    
    
      <category term="工作 生活" scheme="http://blog.bocchi.tokyo/tags/%E5%B7%A5%E4%BD%9C-%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>ActionCable 的个人备忘</title>
    <link href="http://blog.bocchi.tokyo/2016/06/05/20160605/"/>
    <id>http://blog.bocchi.tokyo/2016/06/05/20160605/</id>
    <published>2016-06-05T12:28:51.000Z</published>
    <updated>2016-06-05T12:29:23.000Z</updated>
    
    <content type="html">&lt;p&gt;ActionCable算是Rails对Websocket的封装。当然在这之前也有很多实现方法，比如&lt;a href=&quot;https://github.com/websocket-rails/websocket-rails&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;websocket_rails&lt;/a&gt;&lt;br&gt;Rails 5将对Websocket的支持直接放入了核心模块。默认的web server也从webrick变成了puma。&lt;/p&gt;
&lt;p&gt;下面是对ActionCable的一些备忘。&lt;/p&gt;
&lt;h3 id=&quot;Channel&quot;&gt;&lt;a href=&quot;#Channel&quot; class=&quot;headerlink&quot; title=&quot;Channel&quot;&gt;&lt;/a&gt;Channel&lt;/h3&gt;&lt;p&gt;当我们运行&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rails g channel room speak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    create  app&lt;span class=&quot;meta-keyword&quot;&gt;/channels/&lt;/span&gt;room_channel.rb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    create  app&lt;span class=&quot;meta-keyword&quot;&gt;/assets/&lt;/span&gt;javascripts&lt;span class=&quot;meta-keyword&quot;&gt;/channels/&lt;/span&gt;room.coffee&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Rails会自动帮我们生成ActionCable的雏形。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Be sure to restart your server when you modify this file. Action Cable runs in an EventMachine loop that does not support auto reloading.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RoomChannel&lt;/span&gt; &amp;lt; ApplicationCable::Channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# stream_from &quot;some_channel&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsubscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Any cleanup needed when channel is unsubscribed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;speak&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;subscribed 和 unsubscribed 是两个字带的方法，分别代表当有用户连接以及用户连接断开之后应该做的处理。&lt;/p&gt;
&lt;p&gt;这里有点搞的是 stream_from 这个东西，以及很多时候我们可以看到的 stream_for。&lt;/p&gt;
&lt;p&gt;从官方文档上可以看到，stream_from 的主要参数是一个字符串， 而 stream_for 则是一个model。读第一遍的时候感觉这特么什么玩意儿。看了很多例子之后逐渐有所了解。&lt;/p&gt;
&lt;h3 id=&quot;stream-for-amp-stream-from&quot;&gt;&lt;a href=&quot;#stream-for-amp-stream-from&quot; class=&quot;headerlink&quot; title=&quot;stream_for &amp;amp; stream_from&quot;&gt;&lt;/a&gt;stream_for &amp;amp; stream_from&lt;/h3&gt;&lt;p&gt;通过了解websocket的机制我们知道，每当一个client连接到一个channel，我们的subscribed就会被触发。这个时候，为了之后给这个client发送消息，我们必须给这个client一个记号。而stream_for 和 stream_from 就是为了标记client链接的方法。&lt;/p&gt;
&lt;p&gt;stream_from的主要参数是一个字符串，比如可以是&lt;code&gt;&amp;quot;all&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;posts/#{post.id}&amp;quot;&lt;/code&gt;这种。因为一个标记可以标记多个链接，所以当我们需要将后台消息群发给所有clients的时候，我们可以使用 &lt;code&gt;&amp;quot;all&amp;quot;&lt;/code&gt;统一标记链接，然后在发送的时候使用&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ActionCable&lt;span class=&quot;selector-class&quot;&gt;.server&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.broadcast&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;, some_data_hash)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们需要向所有在浏览某文章的的clients发送comment的更新之类的消息的时候我们可以使用&lt;code&gt;&amp;quot;posts/#{post.id}&amp;quot;&lt;/code&gt;来标记clients的连接。&lt;/p&gt;
&lt;p&gt;假设我们要发送给所有在浏览文章序号为5的用户，可以如下。&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ActionCable&lt;span class=&quot;selector-class&quot;&gt;.server&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.broadcast&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;posts/5&quot;&lt;/span&gt;, some_data_hash)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然有时候我们想要发送给某一个用户。这个时候就是stream_for登场的时候了。&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subscribed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# stream_for current_user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;send_message&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;# find out user to send by id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   user = User.find(some_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;# send the message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ActionCable.server.broadcast(user, some_data_hash)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;client-set-up&quot;&gt;&lt;a href=&quot;#client-set-up&quot; class=&quot;headerlink&quot; title=&quot;client set up&quot;&gt;&lt;/a&gt;client set up&lt;/h3&gt;&lt;p&gt;客户端的set up也比较定式。&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;App.room = App.cable.subscriptions.create &lt;span class=&quot;string&quot;&gt;&quot;RoomChannel&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# (省略)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  connected: &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  unsubscribe: &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @perform &lt;span class=&quot;string&quot;&gt;&#39;speak&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  received: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# (省略)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;connected 用户处理接收到服务器传递过来的消息之后的处理，比如把接收到的数据添加到当前页面中。&lt;/p&gt;
&lt;p&gt;unsubscribe 当然就是用户接收当用户用户离开页面时候的消息的处理。这个时候一般时候就是让后台做些处理。比如上例中的&lt;code&gt;@perform &amp;#39;speak&amp;#39;&lt;/code&gt;用来执行服务器定义在channel里面的&lt;code&gt;speak&lt;/code&gt;方法。&lt;/p&gt;
&lt;h3 id=&quot;turbolinks-存在时候的注意点&quot;&gt;&lt;a href=&quot;#turbolinks-存在时候的注意点&quot; class=&quot;headerlink&quot; title=&quot;turbolinks 存在时候的注意点&quot;&gt;&lt;/a&gt;turbolinks 存在时候的注意点&lt;/h3&gt;&lt;p&gt;虽然个人习惯是建立起rails app的雏形之后迅速把turbolinks注释掉。但是有些依赖turbolinks的页面为了使ActionCable对页面的修改正常表示，我们需要监听以下turbolinks的页面变化事件，比如&lt;code&gt;page:change&lt;/code&gt;。否则我们就比较容易纳闷是不是ActionCable出了什么问题。&lt;/p&gt;
&lt;p&gt;就写这些吧。遇到新的问题再补充。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;ActionCable算是Rails对Websocket的封装。当然在这之前也有很多实现方法，比如&lt;a href=&quot;https://github.com/websocket-rails/websocket-rails&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="Rails WebSocket" scheme="http://blog.bocchi.tokyo/tags/Rails-WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>rack 中间件 warden 的机制</title>
    <link href="http://blog.bocchi.tokyo/2016/05/31/20160531-md/"/>
    <id>http://blog.bocchi.tokyo/2016/05/31/20160531-md/</id>
    <published>2016-05-31T13:37:52.000Z</published>
    <updated>2016-05-31T13:38:46.000Z</updated>
    
    <content type="html">&lt;p&gt;说到warden，大概很多人感觉很陌生。然而很多人耳熟能详的Devise就恰恰是基于warden构建的。&lt;br&gt;所以当我们customize Devise的一些功能的时候常常看到有warden这个关键词的出现。&lt;br&gt;要深入了解Devise的验证机制，不如先从了解warden这个东西入手。&lt;/p&gt;
&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;warden在rack中间件的堆放位置大抵位于session下流。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Rack:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Builder&lt;/span&gt;.new &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;Rack:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Session&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Cookie&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:secret&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;replace this with some secret key&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;Warden:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Manager&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |manager|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    manager.default_strategies &lt;span class=&quot;symbol&quot;&gt;:password&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:basic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    manager.failure_app = BadAuthenticationEndsUpHere&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  run SomeApp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，default_strategies 是warden默认使用的验证策略。而failure_app则是当验证失败的时候处理相关内容的中间件。&lt;/p&gt;
&lt;p&gt;使用warden来验证用户很简单。基本就是以下几个用法。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[&#39;warden&#39;]&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.authenticated&lt;/span&gt;?               # &lt;span class=&quot;selector-tag&quot;&gt;request&lt;/span&gt;是否已经验证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[&#39;warden&#39;]&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.authenticated&lt;/span&gt;?(&lt;span class=&quot;selector-pseudo&quot;&gt;:foo)&lt;/span&gt;         # 在&lt;span class=&quot;selector-tag&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;foo&lt;/span&gt; 中&lt;span class=&quot;selector-tag&quot;&gt;request&lt;/span&gt;是否已经验证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[&#39;warden&#39;]&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.authenticate&lt;/span&gt;(&lt;span class=&quot;selector-pseudo&quot;&gt;:password)&lt;/span&gt;      # 试着用&lt;span class=&quot;selector-tag&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;strategy&lt;/span&gt;来验证，不过就算验证不通过也会继续执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[&#39;warden&#39;]&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.authenticate&lt;/span&gt;!(&lt;span class=&quot;selector-pseudo&quot;&gt;:password)&lt;/span&gt;     # 同上，但是验证不通过就会被&lt;span class=&quot;selector-tag&quot;&gt;failure_app&lt;/span&gt;处理&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要注意的是，warden并不会主动来验证并拒绝request。只有当我们调用以上的验证方法的时候，warden才会横空挡路。&lt;br&gt;这也就是为什么我们使用devise的时候，通常在controller的before_action hook下面写上&lt;code&gt;authorize_user!&lt;/code&gt;的原因了。&lt;/p&gt;
&lt;p&gt;如果request通过验证，我们就可以通过&lt;code&gt;env[&amp;#39;warden&amp;#39;].user&lt;/code&gt;来获取用户的instance。那warden是肿么获取用户的instance的呢？当然我们得告诉他。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Warden::Manager.serialize_into_session &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|user|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  user.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Warden::Manager.serialize_from_session &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|id|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  User.get(id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实很一目了然。request通过验证之后，在＃1中我们将用户的id写到session里面去。而后在#2中我们自然就可以获取用户的id，从而获取用户的instance。&lt;/p&gt;
&lt;h3 id=&quot;strategy策略&quot;&gt;&lt;a href=&quot;#strategy策略&quot; class=&quot;headerlink&quot; title=&quot;strategy策略&quot;&gt;&lt;/a&gt;strategy策略&lt;/h3&gt;&lt;p&gt;warden 通过strategy来定义用户验证策略。&lt;br&gt;我们来看一下password strategy的实现。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Warden::Strategies.add(&lt;span class=&quot;symbol&quot;&gt;:password&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;valid?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    params[&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;] &lt;span class=&quot;params&quot;&gt;||&lt;/span&gt; params[&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;authenticate!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u = User.authenticate(params[&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;], params[&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;? ? fail!(&lt;span class=&quot;string&quot;&gt;&quot;Could not log in&quot;&lt;/span&gt;) : success!(u)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;valid?方法作为strategy的哨兵，在验证策略发动前进行一些检查。如果不写这个方法，那么strategy总是会发送。&lt;/p&gt;
&lt;p&gt;authenticate!则是真正验证的方法。比如上面的例子里面我们看到其调用了User的authenticate方法对用户名密码进行验证。&lt;/p&gt;
&lt;p&gt;在验证的时候我们可以用到的一些方法有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request – Rack::Request object&lt;/li&gt;
&lt;li&gt;session – The session object for the request&lt;/li&gt;
&lt;li&gt;params – The parameters of the request&lt;/li&gt;
&lt;li&gt;env – The Rack env object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如上面我们用params获取了传来的用户名和密码参数。&lt;/p&gt;
&lt;p&gt;进行验证之后，根据验证结果，我们可以有一下处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;halt! – 停止接下来所有的strategy。当前的strategy会作为最后一个策略。&lt;/li&gt;
&lt;li&gt;pass – 直接忽略次策略。当然不推荐就是了。ignore this strategy. It is not required to call this and this is only sugar.&lt;/li&gt;
&lt;li&gt;success! – 策略成功。因为warden的策略有一个成功即会停止，所以紧接着会造成halt!也发动。&lt;/li&gt;
&lt;li&gt;fail! – 策略失败。并发动halt！&lt;/li&gt;
&lt;li&gt;redirect! – 跳转到另一个url。同样发动halt!&lt;/li&gt;
&lt;li&gt;custom! – 返回一个自定义的rack array并造成halt!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;感悟&quot;&gt;&lt;a href=&quot;#感悟&quot; class=&quot;headerlink&quot; title=&quot;感悟&quot;&gt;&lt;/a&gt;感悟&lt;/h3&gt;&lt;p&gt;当Devise太重的时候我们完全可以通过定制自己的warden strategy来定制我们自己的用户验证机制。&lt;/p&gt;
&lt;p&gt;Rack的层层堆砌逐渐由模糊到清晰起来。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;说到warden，大概很多人感觉很陌生。然而很多人耳熟能详的Devise就恰恰是基于warden构建的。&lt;br&gt;所以当我们customize Devise的一些功能的时候常常看到有warden这个关键词的出现。&lt;br&gt;要深入了解Devise的验证机制，不如先从了解warde
    
    </summary>
    
    
      <category term="Ruby" scheme="http://blog.bocchi.tokyo/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>如果猫从世界上消失</title>
    <link href="http://blog.bocchi.tokyo/2016/05/14/20160514-md/"/>
    <id>http://blog.bocchi.tokyo/2016/05/14/20160514-md/</id>
    <published>2016-05-14T10:38:31.000Z</published>
    <updated>2016-05-31T14:09:53.000Z</updated>
    
    <content type="html">&lt;p&gt;左手的知觉已经大部分恢复了。郁郁寡欢的心情也像最近的天气一样逐渐转晴。&lt;br&gt;今天去看了电影版的「世界から猫が消えたなら」(如果猫从世界上消失)的首映。&lt;/p&gt;
&lt;p&gt;就在一切都很平淡的一天，恶魔来到了被突然告知身患脑瘤，生命仅剩一天的男主身边。&lt;br&gt;作为生命延长一天的代价，世界上会有一样东西消失。&lt;br&gt;第一天恶魔从世界上带走了电话。男主和前女友因电话相识的回忆在此消失。&lt;br&gt;第二天恶魔从世界上带走了电影。男主和亲友因为电影而相识，每天交流电影的日常也像从未存在一般。&lt;br&gt;第三天恶魔决定带走陪伴在男主身边的猫。猫和逝去的母亲的回忆涌上心头。&lt;br&gt;最终,对人与人之间感情的珍重战胜了死亡的恐惧，男主得以释然微笑面对死亡。&lt;/p&gt;
&lt;p&gt;电话，电影，猫，这三样东西无非就是喻指爱情，友情和亲情这三样东西。人和人之间的关系，因为这些东西交织在一起，在生活中无形地留下痕迹。&lt;br&gt;原著作者借着这么一个文艺的标题，无非就是想要传达，如果这个世界上有比死亡更恐惧的东西，那必定是失去爱情，友情和亲情了吧。&lt;/p&gt;
&lt;p&gt;今年的春天很短，有相当一段时间在病院里躺过去了。马上该是黄梅时节了。&lt;br&gt;每到这个时节伴随的心情低落也是在所难免。甚至有好几次梦中醒来,泪流满面。&lt;br&gt;那年那时的在雨中无助奔跑的我，而今该有了自信去守护自己重要的东西了吧。&lt;br&gt;尽管如此，岁月的无情和残酷总是让人唏嘘不已。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;左手的知觉已经大部分恢复了。郁郁寡欢的心情也像最近的天气一样逐渐转晴。&lt;br&gt;今天去看了电影版的「世界から猫が消えたなら」(如果猫从世界上消失)的首映。&lt;/p&gt;
&lt;p&gt;就在一切都很平淡的一天，恶魔来到了被突然告知身患脑瘤，生命仅剩一天的男主身边。&lt;br&gt;作为生命延长一天的代
    
    </summary>
    
    
      <category term="生活 回忆" scheme="http://blog.bocchi.tokyo/tags/%E7%94%9F%E6%B4%BB-%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>杂记1</title>
    <link href="http://blog.bocchi.tokyo/2016/04/07/20160407/"/>
    <id>http://blog.bocchi.tokyo/2016/04/07/20160407/</id>
    <published>2016-04-07T14:58:22.000Z</published>
    <updated>2016-04-07T15:00:24.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;使用Swagger-UI自动生成API文档&quot;&gt;&lt;a href=&quot;#使用Swagger-UI自动生成API文档&quot; class=&quot;headerlink&quot; title=&quot;使用Swagger UI自动生成API文档&quot;&gt;&lt;/a&gt;使用Swagger UI自动生成API文档&lt;/h3&gt;&lt;p&gt;Rails环境下直接&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Documentation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;grape-swagger&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; gem &lt;span class=&quot;string&quot;&gt;&#39;grape-swagger-ui&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后mount一下文档的路径&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;API&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Root&lt;/span&gt; &amp;lt; Grape::API&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mount API::Cats&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mount API::Dogs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mount API::Pirates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    add_swagger_documentation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在比较低级的Rack环境下，我们可以使用&lt;code&gt;grape-swagger&lt;/code&gt;+&lt;code&gt;swagger-ui&lt;/code&gt;+&lt;code&gt;rack-cors&lt;/code&gt;解决。&lt;/p&gt;
&lt;p&gt;具体还是&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;grape-swagger&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后去github clone下&lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swagger-ui&lt;/a&gt;&lt;br&gt;打开里面的index.html输入要查看的网址。&lt;/p&gt;
&lt;p&gt;调用API的时候，API端用&lt;a href=&quot;https://github.com/cyu/rack-cors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rack-cors&lt;/a&gt;解决跨域问题。&lt;/p&gt;
&lt;p&gt;比如按照下面的例子进行配置。&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#config.ru&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;Rack:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Cors&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  allow &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    origins &lt;span class=&quot;string&quot;&gt;&#39;localhost:3000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1:3000&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;regexp&quot;&gt;/\Ahttp:\/\/192\.168\.0\.\d&amp;#123;1,3&amp;#125;(:\d+)?\z/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# regular expressions can be used here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resource &lt;span class=&quot;string&quot;&gt;&#39;/file/list_all/&#39;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:headers&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;x-domain-token&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resource &lt;span class=&quot;string&quot;&gt;&#39;/file/at/*&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;:methods&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;symbol&quot;&gt;:get&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:delete&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:put&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:patch&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:options&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:head&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;:headers&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;x-domain-token&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;:expose&lt;/span&gt;  =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;Some-Custom-Response-Header&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;:max_age&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# headers to expose&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  allow &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    origins &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resource &lt;span class=&quot;string&quot;&gt;&#39;/public/*&#39;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:headers&lt;/span&gt; =&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:any&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:methods&lt;/span&gt; =&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:get&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意一点就是，我们应该尽量把swagger-ui放在development组里。&lt;/p&gt;
&lt;h3 id=&quot;把数据库从sqlite3-转移到-postgresql&quot;&gt;&lt;a href=&quot;#把数据库从sqlite3-转移到-postgresql&quot; class=&quot;headerlink&quot; title=&quot;把数据库从sqlite3 转移到 postgresql&quot;&gt;&lt;/a&gt;把数据库从sqlite3 转移到 postgresql&lt;/h3&gt;&lt;p&gt;没用的东西一大堆，比如taps这个东西。在安装的时候陷入了sinatra老版本的兼容地狱。&lt;/p&gt;
&lt;p&gt;真正有用的是&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;gem&lt;/span&gt; install sequel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequel -C sqlite://db/development.sqlite3 postgres://username:password&lt;span class=&quot;variable&quot;&gt;@localhost&lt;/span&gt;/dbname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然别忘了加上&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Gemfile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;pg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单高效。至于rails的配置，这里就省略了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用Swagger-UI自动生成API文档&quot;&gt;&lt;a href=&quot;#使用Swagger-UI自动生成API文档&quot; class=&quot;headerlink&quot; title=&quot;使用Swagger UI自动生成API文档&quot;&gt;&lt;/a&gt;使用Swagger UI自动生成API文档&lt;/
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Rack" scheme="http://blog.bocchi.tokyo/tags/Rack/"/>
    
      <category term="API" scheme="http://blog.bocchi.tokyo/tags/API/"/>
    
      <category term="Postgresql" scheme="http://blog.bocchi.tokyo/tags/Postgresql/"/>
    
  </entry>
  
  <entry>
    <title>在樱花满开的周末阅读RubyChina 代码有感</title>
    <link href="http://blog.bocchi.tokyo/2016/04/02/20160402/"/>
    <id>http://blog.bocchi.tokyo/2016/04/02/20160402/</id>
    <published>2016-04-02T10:42:13.000Z</published>
    <updated>2016-04-02T15:00:22.000Z</updated>
    
    <content type="html">&lt;p&gt;终于天气预报说樱花满开了。周五晚上下了一夜雨，中午爬起看窗外，不幸中的万幸的阴天。&lt;br&gt;漠然坐在床边，翻看着facebook上的万年不变的更新，整理一下今天需要做的事情。&lt;br&gt;谁和谁成为了好友。&lt;br&gt;谁和谁今天开始交际。&lt;br&gt;谁对今天的什么活动感兴趣。&lt;br&gt;谁赞了谁的状态…&lt;/p&gt;
&lt;p&gt;今天该把&lt;code&gt;ruby-china&lt;/code&gt;的源代码clone下来看一下，顺便在local跑一边。&lt;br&gt;safaribooks上堆积了几本书好歹翻一下决定是否继续看下去。&lt;br&gt;顺便不如去看看附近的樱花。&lt;/p&gt;
&lt;p&gt;大致如此吧。&lt;br&gt;抓起自从年末从札幌回来之后再也没摸过的相机，把macbook装进包里，洗脸刷牙，抓两把头发，匆匆出门。&lt;/p&gt;
&lt;p&gt;路上的樱花树并不多，胡乱来了两张发现相机也快没电了。随便吃了点垃圾，在站前的星巴克坐下，开始翻阅一下ruby-cina的源码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/IMG_0240.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/IMG_0247.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/IMG_0250.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Ruby-china-的技术备忘&quot;&gt;&lt;a href=&quot;#Ruby-china-的技术备忘&quot; class=&quot;headerlink&quot; title=&quot;Ruby-china 的技术备忘&quot;&gt;&lt;/a&gt;Ruby-china 的技术备忘&lt;/h3&gt;&lt;p&gt;Ruby-china的代码感觉可读性很高，并且更新较为频繁，也用到了一些自己不熟悉的技术，首先还是先来整理一下这些平时不太接触的技术吧。&lt;/p&gt;
&lt;h4 id=&quot;Elasticsearch&quot;&gt;&lt;a href=&quot;#Elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch&quot;&gt;&lt;/a&gt;Elasticsearch&lt;/h4&gt;&lt;p&gt;强大的站内搜索工具。配合ruby的wrapper&lt;br&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-rails&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;elasticsearch-rails&lt;/a&gt;可以实现强大的全文搜索功能。感觉大抵和solr＋sunspot类似。另外对于中文搜索需要配合一些tokenizer。&lt;/p&gt;
&lt;h4 id=&quot;Postgresql&quot;&gt;&lt;a href=&quot;#Postgresql&quot; class=&quot;headerlink&quot; title=&quot;Postgresql&quot;&gt;&lt;/a&gt;Postgresql&lt;/h4&gt;&lt;p&gt;虽然是关系型数据库，但是支持json。RubyChina之前使用mongodb，最近切换到了postgresql。&lt;/p&gt;
&lt;h4 id=&quot;Actioncable&quot;&gt;&lt;a href=&quot;#Actioncable&quot; class=&quot;headerlink&quot; title=&quot;Actioncable&quot;&gt;&lt;/a&gt;Actioncable&lt;/h4&gt;&lt;p&gt;Rails 5的新特征。其实就是websocket的Rails实现。&lt;/p&gt;
&lt;h4 id=&quot;second-level-cache&quot;&gt;&lt;a href=&quot;#second-level-cache&quot; class=&quot;headerlink&quot; title=&quot;second_level_cache&quot;&gt;&lt;/a&gt;second_level_cache&lt;/h4&gt;&lt;p&gt;很酷炫的一个gem。&lt;a href=&quot;https://github.com/hooopo/second_level_cache&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;second_level_cache&lt;/a&gt;直接override了ActiveRecord的find方法，find方法的结果会直接被cache，但是不用担心，当发生update，delete，create等变化的时候，cache的内容也会相应得到变化。&lt;/p&gt;
&lt;p&gt;需要注意的是，这个gem的作者推荐大家使用dalli_store作为默认的store，这大概也是Ruby-china使用dalli_store的原因了。&lt;/p&gt;
&lt;h4 id=&quot;rack-attack&quot;&gt;&lt;a href=&quot;#rack-attack&quot; class=&quot;headerlink&quot; title=&quot;rack-attack&quot;&gt;&lt;/a&gt;rack-attack&lt;/h4&gt;&lt;p&gt;纯引用。&lt;code&gt;Rack::Attack is a rack middleware to protect your web app from bad clients. It allows whitelisting, blacklisting, throttling, and tracking based on arbitrary properties of the request.&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;一些感想&quot;&gt;&lt;a href=&quot;#一些感想&quot; class=&quot;headerlink&quot; title=&quot;一些感想&quot;&gt;&lt;/a&gt;一些感想&lt;/h3&gt;&lt;p&gt;阅读ruby-china的源码让无聊枯燥的周末下午突然变得很有意思。&lt;br&gt;作为一个ruby开发者，再次深刻体会到ruby以及rails世界的深奥和广大。&lt;br&gt;当然ruby-china也有一些地方美中不足。&lt;br&gt;比如对cache依赖较多，而没有使用一些前段技术来提升用户体验和速度。&lt;br&gt;比如很多地方没有针对开发者的优化。&lt;br&gt;文档还不是十分完善，部署较为复杂，容易使得初学者望而生怯。&lt;/p&gt;
&lt;p&gt;to be continued…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;终于天气预报说樱花满开了。周五晚上下了一夜雨，中午爬起看窗外，不幸中的万幸的阴天。&lt;br&gt;漠然坐在床边，翻看着facebook上的万年不变的更新，整理一下今天需要做的事情。&lt;br&gt;谁和谁成为了好友。&lt;br&gt;谁和谁今天开始交际。&lt;br&gt;谁对今天的什么活动感兴趣。&lt;br&gt;谁赞了
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://blog.bocchi.tokyo/tags/Ruby/"/>
    
      <category term="生活" scheme="http://blog.bocchi.tokyo/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>东京一年</title>
    <link href="http://blog.bocchi.tokyo/2016/03/27/20160327/"/>
    <id>http://blog.bocchi.tokyo/2016/03/27/20160327/</id>
    <published>2016-03-27T15:49:34.000Z</published>
    <updated>2016-03-27T15:50:23.000Z</updated>
    
    <content type="html">&lt;p&gt;前些阵子看到名古屋大学的学弟学妹各种分享毕业照，恍然才发现自己已经毕业一年有余。&lt;br&gt;独自离开生活了两年半的名古屋的破烂公寓，在东京开始社会人的生活，正好却是去年今天的事情。&lt;br&gt;樱花三三两两半开不开，天气也算是乍暖还寒，心里充满着对新生活的各种憧憬和遐想。&lt;/p&gt;
&lt;p&gt;时间过得真快，当被问及将来的打算，常用来作为借口的那句”总之先干个两三年”中，已经有一年悄然而逝。&lt;br&gt;逼问自己到底有什么理想的心情也许该变得更紧迫了。&lt;/p&gt;
&lt;p&gt;趁着下午阳光不错整理了一下房间。发现一年之前搬家时候塞到纸箱里的一些东西，&lt;br&gt;还是原封不动地静静地躺在纸箱里。&lt;br&gt;曾经非常想要的动漫角色的模型，当年出国时候奶奶买的毛衣，以及裱装得好好的修士学位证书。&lt;/p&gt;
&lt;p&gt;试着回忆这一年的一些事情，脑里最先浮现的却是几个记忆尤深的片段。&lt;/p&gt;
&lt;p&gt;六月的单车，耳边掠过的暖风，羽田机场多摩川河口的黄昏。&lt;/p&gt;
&lt;p&gt;八月摇晃的各站停的列车，手里攥紧的青春18。人山人海的多摩川烟花大会。&lt;/p&gt;
&lt;p&gt;十二月玉树银花一般点缀满夜灯的路旁，回首微微一笑的少女。&lt;/p&gt;
&lt;p&gt;年末呼啸地海风中，日本最北端的小木屋里的一丝温暖。&lt;/p&gt;
&lt;p&gt;这些深刻的记忆终究也会像纸箱中的旧物一样，渐渐地被淡忘。&lt;br&gt;就像去年夏天的烟花一样，只存在那短短的上升到绽放的一瞬，而那之后却是夏日墨绿色的夜空。&lt;br&gt;就这样，第二年也开始了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前些阵子看到名古屋大学的学弟学妹各种分享毕业照，恍然才发现自己已经毕业一年有余。&lt;br&gt;独自离开生活了两年半的名古屋的破烂公寓，在东京开始社会人的生活，正好却是去年今天的事情。&lt;br&gt;樱花三三两两半开不开，天气也算是乍暖还寒，心里充满着对新生活的各种憧憬和遐想。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="毕业季" scheme="http://blog.bocchi.tokyo/tags/%E6%AF%95%E4%B8%9A%E5%AD%A3/"/>
    
      <category term="回忆" scheme="http://blog.bocchi.tokyo/tags/%E5%9B%9E%E5%BF%86/"/>
    
      <category term="生活" scheme="http://blog.bocchi.tokyo/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>「いつかこの恋を思い出してきっと泣いてしまう」 完结感想</title>
    <link href="http://blog.bocchi.tokyo/2016/03/21/20160321/"/>
    <id>http://blog.bocchi.tokyo/2016/03/21/20160321/</id>
    <published>2016-03-21T14:36:38.000Z</published>
    <updated>2016-03-21T14:43:22.000Z</updated>
    
    <content type="html">&lt;p&gt;三连休最后一天。匆匆赶回家看完了月9的纯爱剧「いつかこの恋を思い出してきっと泣いてしまう」。&lt;br&gt;《东京爱情故事》的编剧再次出山的力作，细节的描写可见一斑。&lt;/p&gt;
&lt;!-- 自幼父母双亡由爷爷带大的男主増田錬为了攒钱买回爷爷被骗走的土地，独自上东京在搬家公司打工。
为了将一封朋友偷来的钱包里的信返回给失主，独自前往北海道。
女主单亲而后很早母亲也去世了，从关西被领养到北海道，受尽不公平的对待，甚至要被迫嫁给比自己大一倍的男人。直到，男主女主相遇，然后 --&gt;
&lt;p&gt;特别喜欢的描写有两段。&lt;/p&gt;
&lt;p&gt;一段是女主和男主还未来得及交换联系方式就走散在东京街头之后一年之间再无相见的情节。&lt;br&gt;虽然两人住在同一个车站附近，坐着同一个路线的巴士，甚至，会去同一家洗衣店。仔细一看不起眼的洗衣店名，才恍然发现男主一直去的北口店，而女主则是去的南口店，一年之间，无数次擦肩而过，着实能让人纠心不已。&lt;/p&gt;
&lt;p&gt;而另一段，男主在回会津老家之后一度消失然后故事直转5年以后这段情节也可谓是神来之笔。&lt;br&gt;编剧并没有刻意描述2011年3月11日发生的地震，却用出租车司机无意之间交谈坂上二郎死去这件事情来暗示明天即将发生的地震，也完美地交代了为什么剧情一转5年之后男主恍如他人，从一个善良的青年变成一个外表冷漠干着灰色勾当的人。而我个人也是喜欢这种在物是人非之后重新去追求失去的美好这种剧情。&lt;/p&gt;
&lt;p&gt;当然纯爱剧的主题无非就是三角恋这种狗血的桥段。「いつ恋」这部剧也难逃一劫。男二这种有钱不任性的性格基本属于无敌。甚至不经意间随着5年时间的消磨，男女主再无相见，男二也很自然得上位了。&lt;/p&gt;
&lt;p&gt;时间可以消磨一切这句话一点不假，对一个人再怎么喜欢，再怎么曾经疯狂，都会在时间中慢慢老去。甚至一度，5年之后偶然打听到男主现状的女主也只是怀着对方过得是否还好的心情与男主相见。就像五月天的歌词一样，只是默默“为了你而祈祷，而祝福”。&lt;br&gt;&lt;!-- 此时男二的作死虽然也是情节需要，但是若干种种以后男主女主的爱的死灰复燃却也是情理之中。 --&gt;&lt;/p&gt;
&lt;p&gt;但是有些人，本来就该在一起。&lt;br&gt;从男主女主看似很无聊却乐在其中的默契的谈话中，几乎没有棱角而互相契合的性格，以及相同的身世带来的对对方心情的感同身受中，可以看出这两个人强烈的羁绊。他们甚至没有约好，却能拍着路边地上的小花来相互鼓励对方。5年的时间让彼此心中的感情从热火慢慢冷却成袅袅炊烟，却在两人再次相见之后迅速死灰复燃。&lt;/p&gt;
&lt;p&gt;故事最后以男主不辞千里奔赴北海道表达自己的真实感情，而女主最终坦然面对，两人在停在下雪的夜里的大卡车上接吻结束。&lt;/p&gt;
&lt;p&gt;虽然最后对这段感情成了远距离恋爱略表遗憾，但是如今在各种通信及交通手段极致发达的现代，应该也不用让观众为这两个人担心了吧。&lt;/p&gt;
&lt;p&gt;最后，自己也加油吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;三连休最后一天。匆匆赶回家看完了月9的纯爱剧「いつかこの恋を思い出してきっと泣いてしまう」。&lt;br&gt;《东京爱情故事》的编剧再次出山的力作，细节的描写可见一斑。&lt;/p&gt;
&lt;!-- 自幼父母双亡由爷爷带大的男主増田錬为了攒钱买回爷爷被骗走的土地，独自上东京在搬家公司打工。
为了
    
    </summary>
    
    
      <category term="纯爱" scheme="http://blog.bocchi.tokyo/tags/%E7%BA%AF%E7%88%B1/"/>
    
      <category term="感想" scheme="http://blog.bocchi.tokyo/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="日剧" scheme="http://blog.bocchi.tokyo/tags/%E6%97%A5%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>Set Up Test Code for Existing Rails Code Base</title>
    <link href="http://blog.bocchi.tokyo/2016/03/20/20160320/"/>
    <id>http://blog.bocchi.tokyo/2016/03/20/20160320/</id>
    <published>2016-03-20T04:48:42.000Z</published>
    <updated>2016-03-20T04:56:38.000Z</updated>
    
    <content type="html">&lt;p&gt;工作以后发现一个有趣的事情，很多有经验的程序员擅长在已有的code base上各种修改，各种增加新功能。&lt;br&gt;但是一旦之前什么基础都没有，那就两眼一抹黑，举步艰难了。我也是其中一个。&lt;/p&gt;
&lt;p&gt;很早以前做过很多Rails的项目，这些Rails的项目都不曾有test code。工作以后，在现有的test code基础上渐渐开始依葫芦画瓢写起了test，搞起了所谓的TDD，但是一旦切换到没有test code的项目，瞬间就捉襟见肘，找不着门路了。&lt;br&gt;索性利用三连休的空隙，彻底上手一下给没有test code的项目添加test code以及测试框架，以弥补以往的不足。&lt;/p&gt;
&lt;h3 id=&quot;Set-Up&quot;&gt;&lt;a href=&quot;#Set-Up&quot; class=&quot;headerlink&quot; title=&quot;Set Up&quot;&gt;&lt;/a&gt;Set Up&lt;/h3&gt;&lt;p&gt;前提是已经有了Rails的项目。还未添加任何test代码。&lt;br&gt;我们选择用Rspec作为test框架。使用FactoryGirl来有效创建dummy的数据库内容。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;group &lt;span class=&quot;symbol&quot;&gt;:development&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gem &lt;span class=&quot;string&quot;&gt;&#39;rspec-rails&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gem &lt;span class=&quot;string&quot;&gt;&#39;factory_girl_rails&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先依赖的Gem不要装错了，因为Rspec和FactoryGirl不光能用在Rails框架中，其他的诸如sinatra等基于Rack的web框架基本都能使用，所以，在Rails中我们需要依赖的是以上两个gem。&lt;/p&gt;
&lt;p&gt;接下来就是&lt;code&gt;bundle install&lt;/code&gt; 以及准备好测试用的数据库了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bundle &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; rake db:migrate RAILS_ENV=&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rails g rspec:install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行以后会生成以下的文件。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;rspec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-tag&quot;&gt;rails_helper&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── &lt;span class=&quot;selector-tag&quot;&gt;spec_helper&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Rspec在安装之后会hook进Rails的generator，所以以后生成controller或者model的时候都会自动生成其相应的rspec文件。但是对已经有的code，我们需要自己建立文件。具体的文件目录的结构如下。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── controllers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── posts_controller_spec&lt;span class=&quot;selector-class&quot;&gt;.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── factories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── posts&lt;span class=&quot;selector-class&quot;&gt;.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── users&lt;span class=&quot;selector-class&quot;&gt;.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── models&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── post_spec&lt;span class=&quot;selector-class&quot;&gt;.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── user_spec&lt;span class=&quot;selector-class&quot;&gt;.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── rails_helper&lt;span class=&quot;selector-class&quot;&gt;.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── spec_helper.rb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;factories 用来存放需要dummy的model的object，model和controller当然以后还会有helper之类的那其实就和app目录底下类似，当然注意文件命名规则是app目录底下的文件名加上&lt;code&gt;_spec&lt;/code&gt;的postfix。&lt;/p&gt;
&lt;h3 id=&quot;factoryGirl的用法&quot;&gt;&lt;a href=&quot;#factoryGirl的用法&quot; class=&quot;headerlink&quot; title=&quot;factoryGirl的用法&quot;&gt;&lt;/a&gt;factoryGirl的用法&lt;/h3&gt;&lt;p&gt;用factoryGirl的DSL很快就能上手如何生成数据库的dummy data。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FactoryGirl.define &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:post1&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title &lt;span class=&quot;string&quot;&gt;&quot;test post 1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    description &lt;span class=&quot;string&quot;&gt;&quot;this is test post 1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content &lt;span class=&quot;string&quot;&gt;&quot;This is a Sample Article.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:post2&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title &lt;span class=&quot;string&quot;&gt;&quot;test post 2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    description &lt;span class=&quot;string&quot;&gt;&quot;this is test post 2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content &lt;span class=&quot;string&quot;&gt;&quot;This is a Sample Article of post2.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用FactoryGirl生成的dummy data也非常方便。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当我们只需要生成和params一样用于传递给post方法的参数的时候我们使用&lt;code&gt;attributes_for&lt;/code&gt;方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当我们需要生成具体的数据库数据并写入数据库的时候，使用&lt;code&gt;create&lt;/code&gt;方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;党我们只需要生成数据并不需要写入数据库的时候，使用&lt;code&gt;build&lt;/code&gt;方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如我们有以下用法。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let(&lt;span class=&quot;symbol&quot;&gt;:post1&lt;/span&gt;)  &amp;#123; FactoryGirl.create(&lt;span class=&quot;symbol&quot;&gt;:post1&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let(&lt;span class=&quot;symbol&quot;&gt;:post1_params&lt;/span&gt;)  &amp;#123; FactoryGirl.attributes_for(&lt;span class=&quot;symbol&quot;&gt;:post1&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;it &lt;span class=&quot;string&quot;&gt;&#39;expected to be able to create posts&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post &lt;span class=&quot;symbol&quot;&gt;:create&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;post:&lt;/span&gt; post1_params&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  expect(Post.last.content).to eq post2_params[&lt;span class=&quot;symbol&quot;&gt;:content&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;assigns(:post)&lt;/code&gt;用来访问controller中的instance variable &lt;code&gt;@post&lt;/code&gt;。所以这里我们通过确认&lt;code&gt;@post&lt;/code&gt;的content是否和post2_params的content一致来进行test。&lt;/p&gt;
&lt;h3 id=&quot;current-user-params&quot;&gt;&lt;a href=&quot;#current-user-params&quot; class=&quot;headerlink&quot; title=&quot;current_user ? params ?&quot;&gt;&lt;/a&gt;current_user ? params ?&lt;/h3&gt;&lt;p&gt;我们在controller中经常用到一些诸如params以及devise的helper方法&lt;code&gt;current_user&lt;/code&gt;。这些东西在测试的时候会给我们造成不小的麻烦。好在我们可以很轻松的stub这些方法，使得他们返回我们希望的值。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(:normal_user)&lt;/span&gt;&lt;/span&gt; &amp;#123;  FactoryGirl.create(:gyorou) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(controller)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.to&lt;/span&gt; receive(:current_user)&lt;span class=&quot;selector-class&quot;&gt;.and_return&lt;/span&gt; normal_user&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;to be continued…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;工作以后发现一个有趣的事情，很多有经验的程序员擅长在已有的code base上各种修改，各种增加新功能。&lt;br&gt;但是一旦之前什么基础都没有，那就两眼一抹黑，举步艰难了。我也是其中一个。&lt;/p&gt;
&lt;p&gt;很早以前做过很多Rails的项目，这些Rails的项目都不曾有test c
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Rspec" scheme="http://blog.bocchi.tokyo/tags/Rspec/"/>
    
      <category term="FactoryGirl" scheme="http://blog.bocchi.tokyo/tags/FactoryGirl/"/>
    
  </entry>
  
  <entry>
    <title>eager_autoload 是个什么东西</title>
    <link href="http://blog.bocchi.tokyo/2016/03/15/20160315/"/>
    <id>http://blog.bocchi.tokyo/2016/03/15/20160315/</id>
    <published>2016-03-15T14:07:05.000Z</published>
    <updated>2016-03-15T14:07:58.000Z</updated>
    
    <content type="html">&lt;p&gt;在一些Module里面，我们时常看到这种用法。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hoge&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend ActiveSupport::Autoload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  eager_autoload &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autoload Foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autoload Bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;eager_autoload 到底是用来做什么的呢？&lt;/p&gt;
&lt;h3 id=&quot;eager-load-和-autoload&quot;&gt;&lt;a href=&quot;#eager-load-和-autoload&quot; class=&quot;headerlink&quot; title=&quot;eager_load 和 autoload&quot;&gt;&lt;/a&gt;eager_load 和 autoload&lt;/h3&gt;&lt;p&gt;eager_load顾名思义就是饥渴地load，而autoload看不出来什么名堂。&lt;br&gt;一般来说，autoload的模块在Rails中只有被调用的时候才会加载。而eager_load的模块则是从一开始就被加载了。&lt;br&gt;Rails中，development mode启动较快，那是因为对很多模块Rails启用了autoload。&lt;br&gt;而在production mode中，Rails则对这些模块启用eager_load。&lt;/p&gt;
&lt;p&gt;有个很明显的比较。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# root/extras/foo.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# root/app/models/blog.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Blog&lt;/span&gt; &amp;lt; ActiveRecord::Base&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# root/config/application.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.autoload_paths += &lt;span class=&quot;string&quot;&gt;%W( &lt;span class=&quot;subst&quot;&gt;#&amp;#123;config.root&amp;#125;&lt;/span&gt;/extras )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们将&lt;code&gt;Foo&lt;/code&gt;定义的文件所在的目录配置成auto_load，&lt;br&gt;于是我们发现，当我们在development mode下，会有如下的结果。&lt;/p&gt;
&lt;figure class=&quot;highlight sml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defined?(&lt;span class=&quot;type&quot;&gt;Blog&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined?(&lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Blog&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;type&quot;&gt;Blog&lt;/span&gt; (call &lt;span class=&quot;symbol&quot;&gt;&#39;Blog&lt;/span&gt;.connection&#39; to establish a connection)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined?(&lt;span class=&quot;type&quot;&gt;Blog&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;constant&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined?(&lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;constant&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在developmenet mode下，Blog 和 Foo都是采用的auto_load方式加载，所以只有在被调用的时候才进行了初始化。&lt;/p&gt;
&lt;p&gt;而在production mode中，我们有如下结果。&lt;/p&gt;
&lt;figure class=&quot;highlight sml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defined?(&lt;span class=&quot;type&quot;&gt;Blog&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;constant&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined?(&lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Blog&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;type&quot;&gt;Blog&lt;/span&gt; (call &lt;span class=&quot;symbol&quot;&gt;&#39;Blog&lt;/span&gt;.connection&#39; to establish a connection)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined?(&lt;span class=&quot;type&quot;&gt;Blog&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;constant&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined?(&lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;constant&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们发现，我们定义在extra里面的Foo还是遵循auto_load的原则，当被调用时才初始化，而奇迹般地，Blog这个Constant却是以eager_load方式被预先加载完毕了。&lt;/p&gt;
&lt;p&gt;这说明，Rails对一些默认的加载的模块(ex.&lt;code&gt;/app/*&lt;/code&gt;)按照不同的环境采取了不同的加载策略。而我们自定义的模块，该如何将其也和Rails的策略同步，使得在development mode下 auto_load， 在production mode下eager_load呢？&lt;/p&gt;
&lt;p&gt;我们可以将模块放入&lt;code&gt;eager_load_paths&lt;/code&gt;里面&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt;.eager_load_paths += %W( #&amp;#123;&lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt;.root&amp;#125;/extras )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的话就和Rails默认的行为保持了一致。&lt;/p&gt;
&lt;h3 id=&quot;eager-autoload&quot;&gt;&lt;a href=&quot;#eager-autoload&quot; class=&quot;headerlink&quot; title=&quot;eager_autoload&quot;&gt;&lt;/a&gt;eager_autoload&lt;/h3&gt;&lt;p&gt;讲了那么多eager_load 和 auto_load, 我们终于可以来讲讲&lt;code&gt;eager_autoload&lt;/code&gt;&lt;br&gt;参照最上方的例子。我们在module中&lt;code&gt;Hoge&lt;/code&gt;中想要调用&lt;code&gt;Foo&lt;/code&gt;和&lt;code&gt;Bar&lt;/code&gt;的时候，我们也得考虑如何加载&lt;code&gt;Foo&lt;/code&gt;和&lt;code&gt;Bar&lt;/code&gt;。&lt;br&gt;而使用&lt;code&gt;eager_autoload&lt;/code&gt;的最大好处就是，当我们eagaer_load &lt;code&gt;Hoge&lt;/code&gt;的时候，&lt;code&gt;Foo&lt;/code&gt;和&lt;code&gt;bar&lt;/code&gt;也被eager_load。当我们用auto_load加载&lt;code&gt;Hoge&lt;/code&gt;的时候，&lt;code&gt;Foo&lt;/code&gt;和&lt;code&gt;bar&lt;/code&gt;也同样是auto_load。&lt;/p&gt;
&lt;h3 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h3&gt;&lt;p&gt;和Ruby语言本身做对比，eager_load 无非就是我们所谓的require，而auto_load和ruby的auto_load也是相应的。&lt;br&gt;只不过Rails的这两个方法帮我们做了更多的事情(寻找文件路径等等)。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在一些Module里面，我们时常看到这种用法。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://blog.bocchi.tokyo/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Prevent Browser from caching the page</title>
    <link href="http://blog.bocchi.tokyo/2016/03/12/20160312/"/>
    <id>http://blog.bocchi.tokyo/2016/03/12/20160312/</id>
    <published>2016-03-12T06:04:47.000Z</published>
    <updated>2016-03-12T06:05:46.000Z</updated>
    
    <content type="html">&lt;p&gt;Browser Cache在大部分时候是很有用的。在大多数时候，Brower Cache可以减少对server发起request的次数减少server端的压力，以及给用户带来更流畅的体验。&lt;br&gt;但是有时候，我们却对Browser cache头疼不已。比如，当我们在当前页面使用ajax对页面进行了一些操作之后，转移到下一个页面，然后点击Browser的返回键返回上一个页面的时候，我们会很失望得发现我们用js进行的操作并没有及时反映。&lt;/p&gt;
&lt;p&gt;这个时候的对策则是在HTTP的headers里面强制写上不让Browser Cache的内容。在Rails中的实现方法可以是hook到&lt;code&gt;action_controller&lt;/code&gt;中。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### application_controller.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set_cache_headers&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   response.headers[&lt;span class=&quot;string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;no-cache, no-store, max-age=0, must-revalidate&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   response.headers[&lt;span class=&quot;string&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   response.headers[&lt;span class=&quot;string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;Fri, 01 Jan 1990 00:00:00 GMT&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里增加了三个header。分别是&lt;code&gt;Cache-Control&lt;/code&gt;, &lt;code&gt;Pragma&lt;/code&gt; 以及 &lt;code&gt;Expires&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给&lt;code&gt;Expires&lt;/code&gt; 设置一个过去的日期 和 &lt;code&gt;Cache-Control&lt;/code&gt; 中设置 &lt;code&gt;max-age&lt;/code&gt;其实是一回事。那么我们为什么要画蛇添足呢？&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;Pragma&lt;/code&gt; 和 &lt;code&gt;Expires&lt;/code&gt;这两个东西是http1.0时代时候用来禁止Cache的方法。当前时代几本已经木有了http1.0的踪影，但是为了防止一些客户端以及proxy仍然使用着http1.0的实现，我们不妨就加上了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Browser Cache在大部分时候是很有用的。在大多数时候，Brower Cache可以减少对server发起request的次数减少server端的压力，以及给用户带来更流畅的体验。&lt;br&gt;但是有时候，我们却对Browser cache头疼不已。比如，当我们在当前页面
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Http" scheme="http://blog.bocchi.tokyo/tags/Http/"/>
    
      <category term="Cache" scheme="http://blog.bocchi.tokyo/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>使用devise进行用户验证后的post redirect</title>
    <link href="http://blog.bocchi.tokyo/2016/03/07/20160307/"/>
    <id>http://blog.bocchi.tokyo/2016/03/07/20160307/</id>
    <published>2016-03-07T14:56:21.000Z</published>
    <updated>2016-03-07T14:58:51.000Z</updated>
    
    <content type="html">&lt;p&gt;有些时候我们想要实现当未登录用户点击报名某个活动的时候，能够跳转到登录界面，输入正确的用户信息之后直接跳转回来，并已经完成报名。&lt;br&gt;把思路理一下就是需要在登录之后redirect到一个post方法。&lt;br&gt;那在Rails中使用devise做user auth的时候，如何实现呢？&lt;/p&gt;
&lt;p&gt;首先Rails根本不支持post的redirect。于是我们别做梦了，老老实实修改user case？&lt;br&gt;嘛其实这个问题，当我们想千方百计redirect回原来的post方法的时候就已经把自己设计套死了。&lt;/p&gt;
&lt;p&gt;重新审视一下我们的要求，很简单，就是要在点击报名之后，如果未登录，则跳转登录，然后登录之后自动完成报名。&lt;br&gt;之前的post方法也只不过是我们在用户已经登录的情况下完成报名的一种手段而已罢了。&lt;br&gt;我们完全可以在登录之后顺便将报名情况写进数据库，然后跳转回原来报名链接所在的页面，这样也就和报名无异了。&lt;br&gt;而报名所需要的event id以及报名链接所在页面的url就直接存入session即可。&lt;/p&gt;
&lt;p&gt;devise允许我们customize。所以这次我们直接重载devise 的session controller。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Users::SessionsController&lt;/span&gt; &amp;lt; Devise::SessionsController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.resource = warden.authenticate!(auth_options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set_flash_message(&lt;span class=&quot;symbol&quot;&gt;:notice&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:signed_in&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sign_in(resource_name, resource)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; resource &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; block_given?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; session[&lt;span class=&quot;symbol&quot;&gt;:event_id&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      apply_event&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      respond_with resource, &lt;span class=&quot;symbol&quot;&gt;location:&lt;/span&gt; after_sign_in_path_for(resource)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply_event&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event_id = session.delete(&lt;span class=&quot;symbol&quot;&gt;:event_id&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# create and write into db&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    redirect_to event_detail_path(event_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然别忘了在&lt;code&gt;router&lt;/code&gt;的config中加入重载的配置。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;devise_for &lt;span class=&quot;symbol&quot;&gt;:users&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:controllers&lt;/span&gt; =&amp;gt; &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:sessions&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;users/sessions&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;果然还是应该冷静下来后退几步。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有些时候我们想要实现当未登录用户点击报名某个活动的时候，能够跳转到登录界面，输入正确的用户信息之后直接跳转回来，并已经完成报名。&lt;br&gt;把思路理一下就是需要在登录之后redirect到一个post方法。&lt;br&gt;那在Rails中使用devise做user auth的时候，如何
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Devise" scheme="http://blog.bocchi.tokyo/tags/Devise/"/>
    
  </entry>
  
  <entry>
    <title>如何在devise中返回登陆前的页面</title>
    <link href="http://blog.bocchi.tokyo/2016/03/05/20160305/"/>
    <id>http://blog.bocchi.tokyo/2016/03/05/20160305/</id>
    <published>2016-03-05T07:44:08.000Z</published>
    <updated>2016-03-05T07:45:14.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;如何在devise中返回登陆前的页面&quot;&gt;&lt;a href=&quot;#如何在devise中返回登陆前的页面&quot; class=&quot;headerlink&quot; title=&quot;如何在devise中返回登陆前的页面&quot;&gt;&lt;/a&gt;如何在devise中返回登陆前的页面&lt;/h3&gt;&lt;p&gt;还得从Rails的session说起。&lt;br&gt;最近在将项目的Rails版本从3.2升级到4.5，遇到了不少的坑。很多坑诞生于Monkey patch。比如一些gem提供的接口，&lt;br&gt;有些method的参数发生了改变，但是monkey patch没有来得及跟上。&lt;br&gt;还有一个很明显的变化就是Rails的session从一个简单的hash变成了较为复杂的结构。&lt;/p&gt;
&lt;p&gt;通常登录之后通过reset session来防止黑客通过XSS等方法伪造session id与用户共享session。&lt;br&gt;为了防止丢失之前session中的情报，我们需要在reset之后重新把原来session中的信息并入到新的session中去。&lt;br&gt;Rails3的做法是&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;temp_sess = session&lt;span class=&quot;selector-class&quot;&gt;.dup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reset_session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session.replace(temp_sess)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Rails3 中的session只是一个简单的Hash。所以可以简单地使用repace调包原来的session中的内容。&lt;br&gt;而到了Rails4中，session已经不是了原来的Hash。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#rails 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; session.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; ActionDispatch::Request::Session&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;reset_session之后需要并入原来session中的内容的话，可以使用&lt;code&gt;ActionDispatch::Request::Session#merge!&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;但是不管怎么说，session的本来目的就是来保存一些记录与客户端通信所需要的信息的key value存储。&lt;br&gt;与其它使用session_id来识别客户端的框架不同，Rails使用一个token将session加密并默认保存在cookie之中。&lt;br&gt;需要返回注册/登录的页面的时候，可以在session中先存入当时reference。devise通过注册验证之后跳转。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## save reference into session after&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session[&lt;span class=&quot;symbol&quot;&gt;:return_to&lt;/span&gt;] = request.fullpath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## redirect after login&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;after_sign_in_path_for&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(resource)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  !!session[&lt;span class=&quot;symbol&quot;&gt;:return_to&lt;/span&gt;] ? session.delete(&lt;span class=&quot;symbol&quot;&gt;:return_to&lt;/span&gt;) : mypage_path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何在devise中返回登陆前的页面&quot;&gt;&lt;a href=&quot;#如何在devise中返回登陆前的页面&quot; class=&quot;headerlink&quot; title=&quot;如何在devise中返回登陆前的页面&quot;&gt;&lt;/a&gt;如何在devise中返回登陆前的页面&lt;/h3&gt;&lt;p&gt;还得从Rai
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>又是一年花粉弥漫</title>
    <link href="http://blog.bocchi.tokyo/2016/02/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4%E8%8A%B1%E7%B2%89%E5%BC%A5%E6%BC%AB/"/>
    <id>http://blog.bocchi.tokyo/2016/02/21/又是一年花粉弥漫/</id>
    <published>2016-02-21T08:34:51.000Z</published>
    <updated>2016-02-21T08:36:04.000Z</updated>
    
    <content type="html">&lt;p&gt;旧历的春节过后，上周突然刮起了大风。接着突然连着两天气温瞬间上了摄氏20度。&lt;br&gt;难得春光明媚，稍微去二子玉川的多摩河边溜达了一圈，第二天毫无征兆地开始涕流不止，眼睛发痒。&lt;br&gt;这才恍然醒悟，已经是花粉弥漫的季节了。&lt;/p&gt;
&lt;p&gt;都说人刚到外地的话很容易就突然水土不服。&lt;br&gt;然而花粉过敏却是在不知不觉中悄然生根，在你以为似乎习惯了这里的一年四季，喜欢上这里惬意而自在的生活的时候，突然就投下阴影。&lt;br&gt;与其说是水土不服，花粉过敏倒更像是思乡的愁绪。在往后的漫长的人生之中随然大部分时间都会淡忘，但是到了每个特定的时节，却能让人感到折磨和煎熬。&lt;/p&gt;
&lt;p&gt;不知不觉背景离乡在这里已经生活了三年有余。经历了学生时代到现在踏上社会，在一家还算不错的企业做着web的开发，不断地学习着新的知识，不断地认识新的朋友。一切也许用太过顺利来形容也不为过。而然这约莫四年里，回家的次数却是仅仅的两次，逢年过节，更是一次都没有回去。&lt;/p&gt;
&lt;p&gt;第一年没有回家过年是因为还沉浸在刚到这里的新鲜感。第二年的新年在备战着学会的论文中度过，第三年的借口是忙碌着准备毕业和搬家，而今年本该没有了借口，甚至一度买好了机票，年前爷爷的突然去世使得我不得不改变行程，临时回国了几天之后，退掉了之后的机票。&lt;/p&gt;
&lt;p&gt;奶奶说，爷爷的病本该早些就能发现的，可是他却倔强地不愿意去自己儿子生前工作过的医院诊疗，硬是拖了好久这才诊断出来恶性肿瘤。&lt;br&gt;元旦的晚上想给家里打个电话，却没有人接。后来得知奶奶去医院看青光眼了。除夕的晚上给家里打电话也是没有人接，后来才得知奶奶自己一个人在家冷清，去了姨婆婆的家里。最终今年的新年也在手机群消息频繁地震动声中过去了。&lt;/p&gt;
&lt;p&gt;昨天晚上睡梦中莫名其妙地哭地很厉害，我一个二十五六的青年就像小女子一样哭醒了。已经记不清梦的详细，该是白天朋友圈看到些家庭温馨的照片而戳中了痛点吧。&lt;br&gt;有些时候，和朋友聊天吃饭，不知不觉会聊到家庭以及以前的生活。我似乎也习惯当有人说道:“那你父母一定…”的时候编个随便一点的谎言搪塞过去。能够人模人样地生活着的人，大抵都是接受着良好的家庭环境的影响吧。&lt;br&gt;爷爷在世的时候，打电话回家，除了尽说些自己一切都好，一帆风顺的话，有时候，老人家也会语重心长地和我说:“你年纪也不小了，该是看一下有没有合适的人了，我们不奢求什么，只要大概家庭完整合睦教育良好就行了。”这句本该出自父母口中，略带命令口吻的话，在爷爷的语气中，却更像是一种期待。可是老人家应该也是糊涂了，咱们家这么支离破碎，怎么去期待人家完整和睦呀。&lt;/p&gt;
&lt;p&gt;最近在看富士电视台的&lt;code&gt;いつかこの恋を思い出してきっと泣いてしまう&lt;/code&gt;(追忆潸然)这部日剧，除了被男主女主无数次错过与邂逅以及生活的种种无奈所感，&lt;br&gt;也是庆幸从小在畸形的家庭环境中成长大的男主和女主，还保持着纯洁温柔善良的心。更是庆幸类似环境中成长的自己受到了更加系统和完整的教育，有着一份体面而有价值的工作。&lt;/p&gt;
&lt;p&gt;不知不觉已经工作了一年。二十五还不知二十六的我，依旧在背井离乡的土地上生活着。我并没有安土重迁的观念，甚至只有一种将来并不可能更糟糕的乐观。&lt;br&gt;四五年以后，三十的我，是否还是怀着同样的热情，是否已经找到喜欢的人，是否已经实现了现在的理想，提供和维护着能使人幸福的网络服务？&lt;br&gt;可是不论如何，像是无法逃避春天花粉过敏带来的踢死横流的酸爽一般，这种不时袭来的乡愁依然是会带来针扎一般的疼痛。&lt;br&gt;这种疼痛迫使人更想获得幸福，迫使人想要让更多的人幸福。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;旧历的春节过后，上周突然刮起了大风。接着突然连着两天气温瞬间上了摄氏20度。&lt;br&gt;难得春光明媚，稍微去二子玉川的多摩河边溜达了一圈，第二天毫无征兆地开始涕流不止，眼睛发痒。&lt;br&gt;这才恍然醒悟，已经是花粉弥漫的季节了。&lt;/p&gt;
&lt;p&gt;都说人刚到外地的话很容易就突然水土不服
    
    </summary>
    
    
      <category term="工作" scheme="http://blog.bocchi.tokyo/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="情感" scheme="http://blog.bocchi.tokyo/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>转移到新的博客</title>
    <link href="http://blog.bocchi.tokyo/2016/02/17/%E8%BD%AC%E7%A7%BB/"/>
    <id>http://blog.bocchi.tokyo/2016/02/17/转移/</id>
    <published>2016-02-17T14:24:08.000Z</published>
    <updated>2016-02-17T14:25:35.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//todo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>16年的圣瓦伦丁节</title>
    <link href="http://blog.bocchi.tokyo/2016/02/14/2-14-day/"/>
    <id>http://blog.bocchi.tokyo/2016/02/14/2-14-day/</id>
    <published>2016-02-14T13:08:07.000Z</published>
    <updated>2016-02-17T16:00:55.000Z</updated>
    
    <content type="html">&lt;p&gt;又是一年感恩节。昨晚久违玩游戏玩得太晚，爬起来才发现已经是午后。随便超市里买点垃圾食品吃了不知不觉又玩了一下午游戏…&lt;br&gt;终于还是被自己太烂的游戏技能以及胸中的罪恶感打败，背上电脑匆匆出门。外面好热，2月中旬的东京居然能有21度。&lt;/p&gt;
&lt;p&gt;晃到星巴克才坐下，昨天debug了半天修复的问题，今天又有了相关的新问题。&lt;/p&gt;
&lt;p&gt;还是从昨天的问题反省开始。&lt;/p&gt;
&lt;p&gt;昨天的问题是monkey patch devise的method的地方忽略了strong parameter。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# app/model/user.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;find_first_by_auth_conditions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(warden_conditions)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  conditions = warden_conditions.dup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; login = conditions.delete(&lt;span class=&quot;symbol&quot;&gt;:login&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    where(conditions).where([&lt;span class=&quot;string&quot;&gt;&quot;name = :value OR lower(email) = lower(:value)&quot;&lt;/span&gt;, &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:value&lt;/span&gt; =&amp;gt; login &amp;#125;]).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    where(conditions.to_h).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修复方法是给conditions套上strong parameter。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;find_first_by_auth_conditions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(warden_conditions)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  conditions = warden_conditions.dup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; login = conditions.delete(&lt;span class=&quot;symbol&quot;&gt;:login&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    where(conditions).where([&lt;span class=&quot;string&quot;&gt;&quot;name = :value OR lower(email) = lower(:value)&quot;&lt;/span&gt;, &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:value&lt;/span&gt; =&amp;gt; login &amp;#125;]).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# conditions should be converted to hash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   permitted_conditions = conditions.permit(&lt;span class=&quot;symbol&quot;&gt;:birthday&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:image&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:email&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:family_name&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:gender&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:role&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:given_name&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:phone&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:school&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:major&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:job&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:wechat&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:line&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   raise&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    where(permitted_conditions.to_h).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;邮件正常发送，但是，用户收到邮件点击重置密码的url，输入新密码确认提交之后，居然发生了&lt;code&gt;conditions没有permit方法&lt;/code&gt;的错误。&lt;br&gt;检查一下conditions是啥玩意儿。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;reset_password_token&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;6a108898d4ee931371c71d0e818472dfd0aa5b8ced6a22ed3add543844d50060&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; conditions.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; ActiveSupport::HashWithIndifferentAccess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; conditions.class.ancestors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [ActiveSupport::HashWithIndifferentAccess, Hash, JSON::Ext::Generator::GeneratorMethods::Hash, Enumerable, Object, PP::ObjectMixin, ActiveSupport::Dependencies::Loadable, JSON::Ext::Generator::GeneratorMethods::Object, Kernel, BasicObject]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;昨天的那个啥呢？&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; conditions.class.ancestors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [ActionController::Parameters, ActiveSupport::HashWithIndifferentAccess, Hash, JSON::Ext::Generator::GeneratorMethods::Hash, Enumerable, Object, PP::ObjectMixin, ActiveSupport::Dependencies::Loadable, JSON::Ext::Generator::GeneratorMethods::Object, Kernel, BasicObject]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原来&lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;是 &lt;code&gt;ActionController::Parameters&lt;/code&gt;的父类。&lt;/p&gt;
&lt;p&gt;而那些strong parameter的玩意儿，则是&lt;code&gt;ActionController::Parameters&lt;/code&gt;特有的。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; conditions.class.methods(false)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [&lt;span class=&quot;symbol&quot;&gt;:permit_all_parameters&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:permit_all_parameters=&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:action_on_unpermitted_parameters&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:action_on_unpermitted_parameters=&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:always_permitted_parameters&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:always_permitted_parameters=&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:const_missing&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可是既然&lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;不支持permit，那么我们该肿么办？&lt;/p&gt;
&lt;h3 id=&quot;to-h-and-to-hash&quot;&gt;&lt;a href=&quot;#to-h-and-to-hash&quot; class=&quot;headerlink&quot; title=&quot;to_h and to_hash&quot;&gt;&lt;/a&gt;to_h and to_hash&lt;/h3&gt;&lt;p&gt;很有意思看到了这个ticket。&lt;code&gt;https://bugs.ruby-lang.org/issues/10180&lt;/code&gt;&lt;br&gt;挺有意思的是，to_h是Hash自带的方法，而然，通常当我们需要非显示得将object转换成hash的时候，&lt;br&gt;通常可以试一下to_hash这个方法。to_hash本身需要在后继的class中定义。够lucky的是，&lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;中定义了&lt;code&gt;to_hash&lt;/code&gt;这个方法。&lt;/p&gt;
&lt;p&gt;于是昨天和今天的问题综合起来可以如下解决。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# app/model/user.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;find_first_by_auth_conditions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(warden_conditions)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  conditions = warden_conditions.dup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; login = conditions.delete(&lt;span class=&quot;symbol&quot;&gt;:login&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    where(conditions).where([&lt;span class=&quot;string&quot;&gt;&quot;name = :value OR lower(email) = lower(:value)&quot;&lt;/span&gt;, &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:value&lt;/span&gt; =&amp;gt; login &amp;#125;]).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    where(conditions.to_hash).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;validation-sucks&quot;&gt;&lt;a href=&quot;#validation-sucks&quot; class=&quot;headerlink&quot; title=&quot;validation sucks&quot;&gt;&lt;/a&gt;validation sucks&lt;/h3&gt;&lt;p&gt;其实调查这个问题之前我想到的是另一个问题，即用户修改密码的时候会出发validation， 然后因为仅仅修改密码而没提供其它filed的数值导致user的update失败。这个问题一直困扰了我很久。&lt;/p&gt;
&lt;p&gt;但其实仔细一想，我们无非就需要override devise的修改用户密码的method，在重载的method中忽视validation。而不敢深入devise的源码则是硬伤。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# app/model/user.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reset_password!&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(new_password, new_password_confirmation)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.password = new_password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.password_confirmation = new_password_confirmation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validates_presence_of     &lt;span class=&quot;symbol&quot;&gt;:password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validates_confirmation_of &lt;span class=&quot;symbol&quot;&gt;:password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validates_length_of       &lt;span class=&quot;symbol&quot;&gt;:password&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;within:&lt;/span&gt; Devise.password_length, &lt;span class=&quot;symbol&quot;&gt;allow_blank:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; errors.empty?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clear_reset_password_token&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    after_password_reset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    save(&lt;span class=&quot;symbol&quot;&gt;validate:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上就跳过了修改密码时候的user validation。&lt;/p&gt;
&lt;p&gt;想要成长为一个出色的开发者，显然光会使用信手拈来的工具还是不够的，但我们需要自己customize的时候，我们则需要敢于各种深入和修改。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;又是一年感恩节。昨晚久违玩游戏玩得太晚，爬起来才发现已经是午后。随便超市里买点垃圾食品吃了不知不觉又玩了一下午游戏…&lt;br&gt;终于还是被自己太烂的游戏技能以及胸中的罪恶感打败，背上电脑匆匆出门。外面好热，2月中旬的东京居然能有21度。&lt;/p&gt;
&lt;p&gt;晃到星巴克才坐下，昨天de
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://blog.bocchi.tokyo/tags/Ruby/"/>
    
      <category term="Devise" scheme="http://blog.bocchi.tokyo/tags/Devise/"/>
    
  </entry>
  
  <entry>
    <title>Sunny Bug Day</title>
    <link href="http://blog.bocchi.tokyo/2016/02/13/sunny-bug-day/"/>
    <id>http://blog.bocchi.tokyo/2016/02/13/sunny-bug-day/</id>
    <published>2016-02-13T07:54:12.000Z</published>
    <updated>2016-02-17T15:57:35.000Z</updated>
    
    <content type="html">&lt;p&gt;之前有一阵子收到了很多重置admin密码的邮件。一直当然是有人恶作剧，直接无视了。&lt;br&gt;直到今天才确认用户发送的所有重置password邮件由于某种原因全部发送给了admin。于是开始着手调查。&lt;/p&gt;
&lt;h3 id=&quot;enter-point&quot;&gt;&lt;a href=&quot;#enter-point&quot; class=&quot;headerlink&quot; title=&quot;enter point&quot;&gt;&lt;/a&gt;enter point&lt;/h3&gt;&lt;p&gt;找到最初发送重置密码邮件的地方。&lt;/p&gt;
&lt;figure class=&quot;highlight erb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;#app/views/devise/passwords/new.html.erb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;忘记密码了?&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; form_for(resource, &lt;span class=&quot;symbol&quot;&gt;as:&lt;/span&gt; resource_name, &lt;span class=&quot;symbol&quot;&gt;url:&lt;/span&gt; password_path(resource_name), &lt;span class=&quot;symbol&quot;&gt;html:&lt;/span&gt; &amp;#123; &lt;span class=&quot;symbol&quot;&gt;method:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &amp;#125;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|f|&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; devise_error_messages! &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; f.label &lt;span class=&quot;string&quot;&gt;&quot;邮件地址&quot;&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; f.email_field &lt;span class=&quot;symbol&quot;&gt;:email&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;: &quot;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;control&lt;/span&gt;&quot;, &lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;:&quot;&lt;span class=&quot;title&quot;&gt;width&lt;/span&gt;: 40%&quot;, &lt;span class=&quot;title&quot;&gt;autofocus&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; f.submit &lt;span class=&quot;string&quot;&gt;&quot;给我发送重置密码邮件&quot;&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;:&quot;&lt;span class=&quot;title&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;btn&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;primary&lt;/span&gt;&quot; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;password_path(resource_name)&lt;/code&gt; 对应的controller和action则是&lt;code&gt;devise/passwords_controller#create&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.resource = resource_class.send_reset_password_instructions(resource_params)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; resource &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; block_given?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; successfully_sent?(resource)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    respond_with(&amp;#123;&amp;#125;, &lt;span class=&quot;symbol&quot;&gt;location:&lt;/span&gt; after_sending_reset_password_instructions_path_for(resource_name))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    respond_with(resource)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个方法中设置一下断点看一下&lt;code&gt;resource_params&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; resource_params&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;lengshuiyulang@qq.com&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;貌似ok。问题应该是在&lt;code&gt;resouce_class.send_reset_password_instructions()&lt;/code&gt;这个method里面了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;resource_class&lt;/code&gt; 在这个例子中则是User这个Class。&lt;code&gt;send_reset_password_instructions&lt;/code&gt;由devise通过active concern插入到User类中。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#lib/devise/models/recoverable.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;send_reset_password_instructions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(attributes=&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  recoverable = find_or_initialize_with_errors(reset_password_keys, attributes, &lt;span class=&quot;symbol&quot;&gt;:not_found&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  recoverable.send_reset_password_instructions &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; recoverable.persisted?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  recoverable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法又调用了&lt;code&gt;find_or_initialize_with_errors&lt;/code&gt;。然后这个&lt;code&gt;find_or_initialize_with_errors&lt;/code&gt;会接着调用&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#lib/devise/models/authenticatable.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_or_initialize_with_errors&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(required_attributes, attributes, error=&lt;span class=&quot;symbol&quot;&gt;:invalid&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#:nodoc:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; attributes = attributes.slice(*required_attributes).with_indifferent_access&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; attributes.delete_if &amp;#123; &lt;span class=&quot;params&quot;&gt;|key, value|&lt;/span&gt; value.blank? &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; attributes.size == required_attributes.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   record = find_first_by_auth_conditions(attributes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; record&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   record = new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   required_attributes.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|key|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     value = attributes[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     record.send(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;key&amp;#125;&lt;/span&gt;=&quot;&lt;/span&gt;, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     record.errors.add(key, value.present? ? error : &lt;span class=&quot;symbol&quot;&gt;:blank&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; record&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问题的切入点大概已经浮现了，就是这里了。&lt;code&gt;find_first_by_auth_conditions&lt;/code&gt;，由于之前我们在Rails的User model中monkey patch了这个devise的方法。所以导致我们并没有使用devise的原生态的这个方法。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# modal/user.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;find_first_by_auth_conditions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(warden_conditions)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conditions = warden_conditions.dup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; login = conditions.delete(&lt;span class=&quot;symbol&quot;&gt;:login&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      where(conditions).where([&lt;span class=&quot;string&quot;&gt;&quot;name = :value OR lower(email) = lower(:value)&quot;&lt;/span&gt;, &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:value&lt;/span&gt; =&amp;gt; login &amp;#125;]).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# conditions should be converted to hash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      where(conditions.to_h).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之所以要在application中重载这个方法是因为Qilian需要同时兼容用户ID和邮箱登陆。也就是说在登陆框中输入ID或者Email，都可以登陆。&lt;br&gt;这里的问题不是很显而易见，因为大多数情况下我们我们都没有走到if 条件的else中。然而这次，由于不是login，我们来到了else。查看一下conditions。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; conditions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&quot;lengshuiyulang@qq.com&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; conditions.to_h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原因已经是明白了。原本我们要通过conditions查找有该邮件的用户。然而由于&lt;code&gt;conditions.to_h&lt;/code&gt;返回了一个空hash，导致where检索返回全部用户，于是我们每次取的都是这次检索的第一个用户，在现在的情况下正好是admin。&lt;br&gt;conditions到底是个什么鬼。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; conditions.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; ActionController::Parameters&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到这里大概应该恍然大悟了。其实之所以to_h返回了空hash是因为Rails4.0 以后引进了strong parameter。而&lt;code&gt;ActionController::Parameters&lt;/code&gt;&lt;br&gt;是继承自hash的类，不过其to_h被后续的模块给hook然后添加了过滤验证了。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; conditions.class.ancestors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [ActionController::Parameters, ActiveSupport::HashWithIndifferentAccess, Hash, JSON::Ext::Generator::GeneratorMethods::Hash, Enumerable, Object, PP::ObjectMixin, ActiveSupport::Dependencies::Loadable, JSON::Ext::Generator::GeneratorMethods::Object, Kernel, BasicObject]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;How-to-Fix&quot;&gt;&lt;a href=&quot;#How-to-Fix&quot; class=&quot;headerlink&quot; title=&quot;How to Fix&quot;&gt;&lt;/a&gt;How to Fix&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;find_first_by_auth_conditions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(warden_conditions)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  conditions = warden_conditions.dup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; login = conditions.delete(&lt;span class=&quot;symbol&quot;&gt;:login&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    where(conditions).where([&lt;span class=&quot;string&quot;&gt;&quot;name = :value OR lower(email) = lower(:value)&quot;&lt;/span&gt;, &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:value&lt;/span&gt; =&amp;gt; login &amp;#125;]).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# conditions should be converted to hash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   permitted_conditions = conditions.permit(&lt;span class=&quot;symbol&quot;&gt;:birthday&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:image&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:email&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:family_name&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:gender&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:role&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:given_name&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:phone&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:school&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:major&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:job&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:wechat&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;:line&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   raise&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    where(permitted_conditions.to_h).first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照惯例给condtions加上了strong parameter的验证。 一切OK。&lt;/p&gt;
&lt;h3 id=&quot;Things-learned&quot;&gt;&lt;a href=&quot;#Things-learned&quot; class=&quot;headerlink&quot; title=&quot;Things learned&quot;&gt;&lt;/a&gt;Things learned&lt;/h3&gt;&lt;p&gt;这半个下午的折腾可以说是很有价值的。因为这让我们重新认识到了一些在开发过程中很重要的事情。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;monkey patch 真的很难debug&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在gem中通过raise调用better error debug请注意重启。&lt;br&gt;这个是在浪费了很多时间时候才突然想到的。平时在rails的dev mode我们习惯了用raise来调用better error的网页debug。之所以我们可以直接插入raise，直接刷新网页就可以debug这个还是多亏了rails的spring这个东西。这个东西就像grunt的watch一下默默的帮我们做了很多事情。而然，当你要在gem中使用raise，千万别忘了重启服务器，因为gem中的一些方法之类都是在启动过程中插入到rails中的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;copy and paste 之前还是得三思。这次是因为图省事超的一段代码年代过久，在strong parameter之前的时代虽然是ok的，但是如今已经ng。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;离成为一个出色的Ruby开发者看来还有很长一段路要走。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前有一阵子收到了很多重置admin密码的邮件。一直当然是有人恶作剧，直接无视了。&lt;br&gt;直到今天才确认用户发送的所有重置password邮件由于某种原因全部发送给了admin。于是开始着手调查。&lt;/p&gt;
&lt;h3 id=&quot;enter-point&quot;&gt;&lt;a href=&quot;#ent
    
    </summary>
    
    
      <category term="Rails" scheme="http://blog.bocchi.tokyo/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://blog.bocchi.tokyo/tags/Ruby/"/>
    
  </entry>
  
</feed>
